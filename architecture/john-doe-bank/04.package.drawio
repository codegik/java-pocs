<mxfile host="app.diagrams.net" modified="2023-05-05T18:14:39.073Z" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/112.0" etag="kFgkhTWChTsqLpR1LwgP" version="21.2.4" type="github">
  <diagram id="dIy_7yolNXo8ApJIttfb" name="Page-1">
    <mxGraphModel dx="794" dy="455" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="wq3zZg_m6Ostuyi_Egyb-2" value="&lt;ol&gt;&lt;li&gt;&lt;b&gt;Package by Feature&lt;/b&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;PROS&lt;/li&gt;&lt;ol&gt;&lt;li&gt;self-contained and independent&lt;br&gt;&lt;/li&gt;&lt;li&gt;Better discoverability and overview&lt;/li&gt;&lt;li&gt;Testability: Usually, a class in a feature package has fewer dependencies compared to a “god-class” in a technical package that tries to fulfill all use-cases. So testing becomes easier as we have to create less test fixture.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;CONS&lt;/li&gt;&lt;ol&gt;&lt;li&gt;We might write similar code multiple times.&lt;br&gt;&lt;/li&gt;&lt;li&gt;It might make sense to locate all entities in the common package&lt;/li&gt;&lt;li&gt;It’s tricky to decide which package to put something&lt;/li&gt;&lt;li&gt;It’s also tricky to find out the adequate scope and size of a feature package&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;li&gt;&lt;b&gt;Package by Layer &lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;PROS&lt;/li&gt;&lt;ol&gt;&lt;li&gt;A very popular approach&lt;/li&gt;&lt;li&gt;Simple strategy that doesn’t require much effort&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;CONS&lt;/li&gt;&lt;ol&gt;&lt;li&gt;Poor overview of all classes that belong to a feature&lt;/li&gt;&lt;li&gt;changes can easily break other use cases&lt;/li&gt;&lt;li&gt;results in a mess once your project grows in size&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;li&gt;&lt;b&gt;Clean Architecture&lt;/b&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;PROS&lt;/li&gt;&lt;ol&gt;&lt;li&gt;Isolation&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;CONS&lt;/li&gt;&lt;ol&gt;&lt;li&gt;Hight coupled&lt;/li&gt;&lt;li&gt;Complex and robust&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;li&gt;&lt;b&gt;Package by Domain&lt;/b&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;PROS&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;CONS&lt;/li&gt;&lt;ol&gt;&lt;li&gt;We might need to segregate domains in matter of reduce the scope.&lt;/li&gt;&lt;li&gt;We might write similar code multiple times.&lt;br&gt;&lt;/li&gt;&lt;li&gt;It’s tricky to decide which package to put something&lt;/li&gt;&lt;li&gt;It’s also tricky to find out the adequate scope and size of a feature package&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;/ol&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;horizontal=1;" parent="1" vertex="1">
          <mxGeometry x="190" y="320" width="610" height="560" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
